schema {
  query: Query
  mutation: Mutation
}

directive @emailVerified(status: EmailVerificationStatus!) on FIELD_DEFINITION

directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @hasLoggedIn on FIELD_DEFINITION | OBJECT

type Applicant implements Node {
  createdAt: DateTime!
  databaseId: Int!
  id: ID!
  message: String!
  recruitment: Recruitment!
}

type ApplyForRecruitmentAuthorizationError implements Error {
  message: String!
}

union ApplyForRecruitmentError = ApplyForRecruitmentAuthorizationError | ApplyForRecruitmentInvalidInputError | ApplyForRecruitmentSelfGeneratedError

input ApplyForRecruitmentInput {
  message: String!
}

type ApplyForRecruitmentInvalidInputError implements Error {
  field: ApplyForRecruitmentInvalidInputField!
  message: String!
}

enum ApplyForRecruitmentInvalidInputField {
  MESSAGE
}

type ApplyForRecruitmentPayload {
  errors: [ApplyForRecruitmentError!]!
  feedback: FeedbackApplicant
}

type ApplyForRecruitmentSelfGeneratedError implements Error {
  message: String!
}

type Competition implements Node {
  databaseId: Int!
  id: ID!
  name: String!
}

interface Connection {
  edges: [Edge!]!
  pageInfo: PageInfo!
}

input CreateTagInput {
  name: String!
}

scalar DateTime

type DeleteRecruitmentPayload {
  deletedRecruitmentId: ID!
}

interface Edge {
  cursor: String!
  node: Node!
}

enum EmailVerificationStatus {
  PENDING
  VERIFIED
}

type Entrie {
  user: User!
}

interface Error {
  message: String!
}

type FeedbackApplicant implements Node {
  id: ID!
  isAppliedFor: Boolean!
}

type FeedbackStock implements Node {
  feedbackRecruitmentEdge: RecruitmentEdge
  id: ID!
  removedRecruitmentId: ID
  viewerDoesStock: Boolean!
}

type LoginUserAuthenticationError implements Error {
  message: String!
}

union LoginUserError = LoginUserAuthenticationError | LoginUserInvalidInputError

input LoginUserInput {
  email: String!
  password: String!
}

type LoginUserInvalidInputError implements Error {
  field: LoginUserInvalidInputField!
  message: String!
}

enum LoginUserInvalidInputField {
  EMAIL
  PASSWORD
}

type LoginUserPayload {
  userErrors: [LoginUserError!]!
  viewer: User
}

type Message {
  applicant: Applicant
  content: String
  createdAt: DateTime!
  user: User!
}

type Mutation {
  addRecruitmentTag(recruitmentId: String!, tagId: String!): Boolean!
  addStock(recruitmentId: String!): FeedbackStock!
  applyForRecruitment(input: applicantInput, recruitmentId: String!): ApplyForRecruitmentPayload!
  createMessage(input: createMessageInput!, roomId: String!): Message!
  createRecruitment(input: RecruitmentInput!): RecruitmentPayload!
  createTag(input: CreateTagInput!): Tag!
  deleteRecruitment(id: String!): DeleteRecruitmentPayload!
  loginUser(input: LoginUserInput!): LoginUserPayload!
  logoutUser: Boolean!
  registerUser(input: RegisterUserInput!): RegisterUserPayload!
  removeStock(recruitmentId: String!): FeedbackStock!
  updateRecruitment(id: String!, input: RecruitmentInput!): Recruitment!
}

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Prefecture implements Node {
  databaseId: Int!
  id: ID!
  name: String!
}

type Query {
  appliedRecruitments: [Recruitment!]!
  checkAppliedForRecruitment(recruitmentId: String!): FeedbackApplicant!
  checkStocked(recruitmentId: String!): FeedbackStock!
  competitions: [Competition!]!
  getEntrieUser(roomId: String!): User!
  getRoomMessages(roomId: String!): [Message!]!
  getStockedCount(recruitmentId: String!): FeedbackStock!
  getViewerRooms: [Room!]!
  node(id: ID!): Node
  prefectures: [Prefecture!]!
  recruitment(id: String!): Recruitment!
  recruitments(after: String, first: Int): RecruitmentConnection!
  stockedRecruitments(after: String, first: Int): RecruitmentConnection!
  tags: [Tag!]!
  viewer: User
  viewerRecruitments(after: String, first: Int): RecruitmentConnection!
}

type Recruitment implements Node {
  applicant: Applicant
  closingAt: DateTime
  competition: Competition!
  createdAt: DateTime!
  databaseId: Int!
  detail: String
  id: ID!
  locationLat: Float
  locationLng: Float
  prefecture: Prefecture
  publishedAt: DateTime
  startAt: DateTime
  status: Status!
  tags: [Tag]!
  title: String!
  type: Type!
  user: User!
  venue: String
}

type RecruitmentConnection implements Connection {
  edges: [RecruitmentEdge!]!
  pageInfo: PageInfo!
}

type RecruitmentEdge implements Edge {
  cursor: String!
  node: Recruitment!
}

input RecruitmentInput {
  closingAt: DateTime
  competitionId: String!
  detail: String
  locationLat: Float
  locationLng: Float
  prefectureId: String
  startAt: DateTime
  status: Status!
  tags: [recruitmentTagInput]!
  title: String!
  type: Type!
  venue: String
}

type RecruitmentPayload {
  feedbackRecruitmentEdge: RecruitmentEdge!
}

input RegisterUserInput {
  email: String!
  name: String!
  password: String!
}

type RegisterUserInvalidInputError implements Error {
  field: RegisterUserInvalidInputField!
  message: String!
}

enum RegisterUserInvalidInputField {
  EMAIL
  NAME
  PASSWORD
}

type RegisterUserPayload {
  userErrors: [RegisterUserInvalidInputError!]!
  viewer: User
}

enum Role {
  ADMIN
  GENERAL
}

type Room {
  entrie: Entrie!
  id: String!
}

enum Status {
  CLOSED
  DRAFT
  PUBLISHED
}

type Tag implements Node {
  databaseId: Int!
  id: ID!
  name: String!
}

enum Type {
  JOIN
  MEMBER
  OPPONENT
  OTHER
  PERSONAL
}

type User implements Node {
  avatar: String!
  databaseId: Int!
  email: String!
  emailVerificationStatus: EmailVerificationStatus!
  id: ID!
  introduction: String
  name: String!
  role: Role!
}

input applicantInput {
  message: String!
}

input createMessageInput {
  content: String!
}

input recruitmentTagInput {
  id: String!
  isNew: Boolean!
  name: String!
}